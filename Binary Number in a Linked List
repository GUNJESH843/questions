PROBLEM
{
     Binary Number in a Linked List
     
     A binary number is represented as a series of O's and 1's. In this challenge,
    the series will be in the form of a singly-linked list. Each node instance, a 
    LinkedListNode, has a value, data, and a pointer to the next node, next. Given a 
    reference to the head of a singly linked list, convert the binary number 
    represented to a decimal number.
     
     Example
     Linked List 
     binary -> 0 -> 0 -> 1 -> 1 -> 0 -> 1 -> 0-> null
     
     Linked list corresponding to the binary number (010011)(2) or (19)[10].
     
     
     Function Description:
     {
         Complete the function getNumber in the editor below.
         
         getNumber has the following parameter(s): 
         binary: reference to the head of a singly linked list of binary
        digits
         
         Returns:
         int: a (long integer)[10] representation of the binary number 
     }
     Constraints
     {
         • 1≤ns 64
         
         • All LinkedListNode.data € (01)
         
         • The described (integer)[2] <264
         
     }
         Input Format for Custom Testing
     {
     
         Input from stdin will be processed as follows and passed to the function.
         
         The first line contains an integer n, the size of the linked list binary. 
         Each of the next n lines contains an integer LinkedListNode.data[i] where 0<i<n.
     }
     
     ▾ Sample Case 0 
    {
       Sample Input
       {
           STDIN              Function
           7          ->      binary[] size n = 7 
           0          ->      binary LinkedListNode.data = [0, 0, 1, 1, 0, 1, 0]
           Θ
           1
           1
           0
           1
           0
       }
       
       Sample Output
       {
         26
       }
   }
     
Explanation
     
     Linked List
     {
         binary -> 0 -> 0 -> 1 -> 1 -> 0 -> 1 -> 0-> null
         the linked list is given as input.
         }
         The linked list forms the binary number 0011010 → (0011010)[2]=(26)[10]
     }


SOLUTION
SOURCE CODE:

    import java.util.Scanner;
    class LinkedListNode {
     long data;
     LinkedListNode next;
     LinkedListNode(long data) {
     this.data = data;
     this.next = null;
     }
    }
    public class BinaryLinkedListToDecimal {
     public static long getNumber(LinkedListNode binary) {
     long decimalValue = 0;
     LinkedListNode currentNode = binary;
     while (currentNode != null) {
     decimalValue = (decimalValue << 1) | currentNode.data;
     currentNode = currentNode.next;
     }
     return decimalValue;
     }
     public static void main(String[] args) {
     Scanner scanner = new Scanner(System.in);
     
     int size = scanner.nextInt();
     LinkedListNode head = null;
     LinkedListNode current = null;
     
     for (int i = 0; i < size; i++) {
     long digit = scanner.nextLong();
     LinkedListNode newNode = new LinkedListNode(digit);
     if (head == null) {
     head = newNode;
     current = head;
     } else {
     current.next = newNode;
     current = current.next;
     }
     }
     long result = getNumber(head);
     System.out.println("" + result);
     scanner.close();
     }
    }
